(self.webpackChunksvg_ex_playground=self.webpackChunksvg_ex_playground||[]).push([[4946],{4946:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar conf = {\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ]\r\n};\r\nvar language = {\r\n    tokenPostfix: '.julia',\r\n    keywords: [\r\n        'begin',\r\n        'while',\r\n        'if',\r\n        'for',\r\n        'try',\r\n        'return',\r\n        'break',\r\n        'continue',\r\n        'function',\r\n        'macro',\r\n        'quote',\r\n        'let',\r\n        'local',\r\n        'global',\r\n        'const',\r\n        'do',\r\n        'struct',\r\n        'module',\r\n        'baremodule',\r\n        'using',\r\n        'import',\r\n        'export',\r\n        'end',\r\n        'else',\r\n        'elseif',\r\n        'catch',\r\n        'finally',\r\n        'mutable',\r\n        'primitive',\r\n        'abstract',\r\n        'type',\r\n        'in',\r\n        'isa',\r\n        'where',\r\n        'new'\r\n    ],\r\n    types: [\r\n        'LinRange',\r\n        'LineNumberNode',\r\n        'LinearIndices',\r\n        'LoadError',\r\n        'MIME',\r\n        'Matrix',\r\n        'Method',\r\n        'MethodError',\r\n        'Missing',\r\n        'MissingException',\r\n        'Module',\r\n        'NTuple',\r\n        'NamedTuple',\r\n        'Nothing',\r\n        'Number',\r\n        'OrdinalRange',\r\n        'OutOfMemoryError',\r\n        'OverflowError',\r\n        'Pair',\r\n        'PartialQuickSort',\r\n        'PermutedDimsArray',\r\n        'Pipe',\r\n        'Ptr',\r\n        'QuoteNode',\r\n        'Rational',\r\n        'RawFD',\r\n        'ReadOnlyMemoryError',\r\n        'Real',\r\n        'ReentrantLock',\r\n        'Ref',\r\n        'Regex',\r\n        'RegexMatch',\r\n        'RoundingMode',\r\n        'SegmentationFault',\r\n        'Set',\r\n        'Signed',\r\n        'Some',\r\n        'StackOverflowError',\r\n        'StepRange',\r\n        'StepRangeLen',\r\n        'StridedArray',\r\n        'StridedMatrix',\r\n        'StridedVecOrMat',\r\n        'StridedVector',\r\n        'String',\r\n        'StringIndexError',\r\n        'SubArray',\r\n        'SubString',\r\n        'SubstitutionString',\r\n        'Symbol',\r\n        'SystemError',\r\n        'Task',\r\n        'Text',\r\n        'TextDisplay',\r\n        'Timer',\r\n        'Tuple',\r\n        'Type',\r\n        'TypeError',\r\n        'TypeVar',\r\n        'UInt',\r\n        'UInt128',\r\n        'UInt16',\r\n        'UInt32',\r\n        'UInt64',\r\n        'UInt8',\r\n        'UndefInitializer',\r\n        'AbstractArray',\r\n        'UndefKeywordError',\r\n        'AbstractChannel',\r\n        'UndefRefError',\r\n        'AbstractChar',\r\n        'UndefVarError',\r\n        'AbstractDict',\r\n        'Union',\r\n        'AbstractDisplay',\r\n        'UnionAll',\r\n        'AbstractFloat',\r\n        'UnitRange',\r\n        'AbstractIrrational',\r\n        'Unsigned',\r\n        'AbstractMatrix',\r\n        'AbstractRange',\r\n        'Val',\r\n        'AbstractSet',\r\n        'Vararg',\r\n        'AbstractString',\r\n        'VecElement',\r\n        'AbstractUnitRange',\r\n        'VecOrMat',\r\n        'AbstractVecOrMat',\r\n        'Vector',\r\n        'AbstractVector',\r\n        'VersionNumber',\r\n        'Any',\r\n        'WeakKeyDict',\r\n        'ArgumentError',\r\n        'WeakRef',\r\n        'Array',\r\n        'AssertionError',\r\n        'BigFloat',\r\n        'BigInt',\r\n        'BitArray',\r\n        'BitMatrix',\r\n        'BitSet',\r\n        'BitVector',\r\n        'Bool',\r\n        'BoundsError',\r\n        'CapturedException',\r\n        'CartesianIndex',\r\n        'CartesianIndices',\r\n        'Cchar',\r\n        'Cdouble',\r\n        'Cfloat',\r\n        'Channel',\r\n        'Char',\r\n        'Cint',\r\n        'Cintmax_t',\r\n        'Clong',\r\n        'Clonglong',\r\n        'Cmd',\r\n        'Colon',\r\n        'Complex',\r\n        'ComplexF16',\r\n        'ComplexF32',\r\n        'ComplexF64',\r\n        'CompositeException',\r\n        'Condition',\r\n        'Cptrdiff_t',\r\n        'Cshort',\r\n        'Csize_t',\r\n        'Cssize_t',\r\n        'Cstring',\r\n        'Cuchar',\r\n        'Cuint',\r\n        'Cuintmax_t',\r\n        'Culong',\r\n        'Culonglong',\r\n        'Cushort',\r\n        'Cvoid',\r\n        'Cwchar_t',\r\n        'Cwstring',\r\n        'DataType',\r\n        'DenseArray',\r\n        'DenseMatrix',\r\n        'DenseVecOrMat',\r\n        'DenseVector',\r\n        'Dict',\r\n        'DimensionMismatch',\r\n        'Dims',\r\n        'DivideError',\r\n        'DomainError',\r\n        'EOFError',\r\n        'Enum',\r\n        'ErrorException',\r\n        'Exception',\r\n        'ExponentialBackOff',\r\n        'Expr',\r\n        'Float16',\r\n        'Float32',\r\n        'Float64',\r\n        'Function',\r\n        'GlobalRef',\r\n        'HTML',\r\n        'IO',\r\n        'IOBuffer',\r\n        'IOContext',\r\n        'IOStream',\r\n        'IdDict',\r\n        'IndexCartesian',\r\n        'IndexLinear',\r\n        'IndexStyle',\r\n        'InexactError',\r\n        'InitError',\r\n        'Int',\r\n        'Int128',\r\n        'Int16',\r\n        'Int32',\r\n        'Int64',\r\n        'Int8',\r\n        'Integer',\r\n        'InterruptException',\r\n        'InvalidStateException',\r\n        'Irrational',\r\n        'KeyError'\r\n    ],\r\n    keywordops: ['<:', '>:', ':', '=>', '...', '.', '->', '?'],\r\n    allops: /[^\\w\\d\\s()\\[\\]{}\"'#]+/,\r\n    constants: [\r\n        'true',\r\n        'false',\r\n        'nothing',\r\n        'missing',\r\n        'undef',\r\n        'Inf',\r\n        'pi',\r\n        'NaN',\r\n        'π',\r\n        'ℯ',\r\n        'ans',\r\n        'PROGRAM_FILE',\r\n        'ARGS',\r\n        'C_NULL',\r\n        'VERSION',\r\n        'DEPOT_PATH',\r\n        'LOAD_PATH'\r\n    ],\r\n    operators: [\r\n        '!',\r\n        '!=',\r\n        '!==',\r\n        '%',\r\n        '&',\r\n        '*',\r\n        '+',\r\n        '-',\r\n        '/',\r\n        '//',\r\n        '<',\r\n        '<<',\r\n        '<=',\r\n        '==',\r\n        '===',\r\n        '=>',\r\n        '>',\r\n        '>=',\r\n        '>>',\r\n        '>>>',\r\n        '\\\\',\r\n        '^',\r\n        '|',\r\n        '|>',\r\n        '~',\r\n        '÷',\r\n        '∈',\r\n        '∉',\r\n        '∋',\r\n        '∌',\r\n        '∘',\r\n        '√',\r\n        '∛',\r\n        '∩',\r\n        '∪',\r\n        '≈',\r\n        '≉',\r\n        '≠',\r\n        '≡',\r\n        '≢',\r\n        '≤',\r\n        '≥',\r\n        '⊆',\r\n        '⊇',\r\n        '⊈',\r\n        '⊉',\r\n        '⊊',\r\n        '⊋',\r\n        '⊻'\r\n    ],\r\n    brackets: [\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' }\r\n    ],\r\n    ident: /π|ℯ|\\b(?!\\d)\\w+\\b/,\r\n    // escape sequences\r\n    escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\r\n    escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            [/(::)\\s*|\\b(isa)\\s+/, 'keyword', '@typeanno'],\r\n            [/\\b(isa)(\\s*\\(@ident\\s*,\\s*)/, ['keyword', { token: '', next: '@typeanno' }]],\r\n            [/\\b(type|struct)[ \\t]+/, 'keyword', '@typeanno'],\r\n            // symbols\r\n            [/^\\s*:@ident[!?]?/, 'metatag'],\r\n            [/(return)(\\s*:@ident[!?]?)/, ['keyword', 'metatag']],\r\n            [/(\\(|\\[|\\{|@allops)(\\s*:@ident[!?]?)/, ['', 'metatag']],\r\n            [/:\\(/, 'metatag', '@quote'],\r\n            // regular expressions\r\n            [/r\"\"\"/, 'regexp.delim', '@tregexp'],\r\n            [/r\"/, 'regexp.delim', '@sregexp'],\r\n            // strings\r\n            [/raw\"\"\"/, 'string.delim', '@rtstring'],\r\n            [/[bv]?\"\"\"/, 'string.delim', '@dtstring'],\r\n            [/raw\"/, 'string.delim', '@rsstring'],\r\n            [/[bv]?\"/, 'string.delim', '@dsstring'],\r\n            [\r\n                /(@ident)\\{/,\r\n                {\r\n                    cases: {\r\n                        '$1@types': { token: 'type', next: '@gen' },\r\n                        '@default': { token: 'type', next: '@gen' }\r\n                    }\r\n                }\r\n            ],\r\n            [\r\n                /@ident[!?'']?(?=\\.?\\()/,\r\n                {\r\n                    cases: {\r\n                        '@types': 'type',\r\n                        '@keywords': 'keyword',\r\n                        '@constants': 'variable',\r\n                        '@default': 'keyword.flow'\r\n                    }\r\n                }\r\n            ],\r\n            [\r\n                /@ident[!?']?/,\r\n                {\r\n                    cases: {\r\n                        '@types': 'type',\r\n                        '@keywords': 'keyword',\r\n                        '@constants': 'variable',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }\r\n            ],\r\n            [/\\$\\w+/, 'key'],\r\n            [/\\$\\(/, 'key', '@paste'],\r\n            [/@@ident/, 'annotation'],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // characters\r\n            [/'(?:@escapes|.)'/, 'string.character'],\r\n            // delimiters and operators\r\n            [/[()\\[\\]{}]/, '@brackets'],\r\n            [\r\n                /@allops/,\r\n                {\r\n                    cases: {\r\n                        '@keywordops': 'keyword',\r\n                        '@operators': 'operator'\r\n                    }\r\n                }\r\n            ],\r\n            [/[;,]/, 'delimiter'],\r\n            // numbers\r\n            [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\r\n            [/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\r\n            [/0[bB][01](_?[01])*/, 'number.binary'],\r\n            [/[+\\-]?\\d+(\\.\\d+)?(im?|[eE][+\\-]?\\d+(\\.\\d+)?)?/, 'number']\r\n        ],\r\n        // type\r\n        typeanno: [\r\n            [/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*\\{/, 'type', '@gen'],\r\n            [/([a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*)(\\s*<:\\s*)/, ['type', 'keyword']],\r\n            [/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*/, 'type', '@pop'],\r\n            ['', '', '@pop']\r\n        ],\r\n        // generic type\r\n        gen: [\r\n            [/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*\\{/, 'type', '@push'],\r\n            [/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*/, 'type'],\r\n            [/<:/, 'keyword'],\r\n            [/(\\})(\\s*<:\\s*)/, ['type', { token: 'keyword', next: '@pop' }]],\r\n            [/\\}/, 'type', '@pop'],\r\n            { include: '@root' }\r\n        ],\r\n        // $(...)\r\n        quote: [\r\n            [/\\$\\(/, 'key', '@paste'],\r\n            [/\\(/, '@brackets', '@paren'],\r\n            [/\\)/, 'metatag', '@pop'],\r\n            { include: '@root' }\r\n        ],\r\n        // :(...)\r\n        paste: [\r\n            [/:\\(/, 'metatag', '@quote'],\r\n            [/\\(/, '@brackets', '@paren'],\r\n            [/\\)/, 'key', '@pop'],\r\n            { include: '@root' }\r\n        ],\r\n        // (...)\r\n        paren: [\r\n            [/\\$\\(/, 'key', '@paste'],\r\n            [/:\\(/, 'metatag', '@quote'],\r\n            [/\\(/, '@brackets', '@push'],\r\n            [/\\)/, '@brackets', '@pop'],\r\n            { include: '@root' }\r\n        ],\r\n        // r\"egex string\"\r\n        sregexp: [\r\n            [/^.*/, 'invalid'],\r\n            [/[^\\\\\"()\\[\\]{}]/, 'regexp'],\r\n            [/[()\\[\\]{}]/, '@brackets'],\r\n            [/\\\\./, 'operator.scss'],\r\n            [/\"[imsx]*/, 'regexp.delim', '@pop']\r\n        ],\r\n        tregexp: [\r\n            [/[^\\\\\"()\\[\\]{}]/, 'regexp'],\r\n            [/[()\\[\\]{}]/, '@brackets'],\r\n            [/\\\\./, 'operator.scss'],\r\n            [/\"(?!\"\")/, 'string'],\r\n            [/\"\"\"[imsx]*/, 'regexp.delim', '@pop']\r\n        ],\r\n        // raw\"string\"\r\n        rsstring: [\r\n            [/^.*/, 'invalid'],\r\n            [/[^\\\\\"]/, 'string'],\r\n            [/\\\\./, 'string.escape'],\r\n            [/\"/, 'string.delim', '@pop']\r\n        ],\r\n        rtstring: [\r\n            [/[^\\\\\"]/, 'string'],\r\n            [/\\\\./, 'string.escape'],\r\n            [/\"(?!\"\")/, 'string'],\r\n            [/\"\"\"/, 'string.delim', '@pop']\r\n        ],\r\n        // \"string\".\r\n        dsstring: [\r\n            [/^.*/, 'invalid'],\r\n            [/[^\\\\\"\\$]/, 'string'],\r\n            [/\\$/, '', '@interpolated'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string.delim', '@pop']\r\n        ],\r\n        dtstring: [\r\n            [/[^\\\\\"\\$]/, 'string'],\r\n            [/\\$/, '', '@interpolated'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"(?!\"\")/, 'string'],\r\n            [/\"\"\"/, 'string.delim', '@pop']\r\n        ],\r\n        // interpolated sequence\r\n        interpolated: [\r\n            [/\\(/, { token: '', switchTo: '@interpolated_compound' }],\r\n            [/[a-zA-Z_]\\w*/, 'identifier'],\r\n            ['', '', '@pop'] // just a $ is interpreted as a $\r\n        ],\r\n        // any code\r\n        interpolated_compound: [[/\\)/, '', '@pop'], { include: '@root' }],\r\n        // whitespace & comments\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/#=/, 'comment', '@multi_comment'],\r\n            [/#.*$/, 'comment']\r\n        ],\r\n        multi_comment: [\r\n            [/#=/, 'comment', '@push'],\r\n            [/=#/, 'comment', '@pop'],\r\n            [/=(?!#)|#(?!=)/, 'comment'],\r\n            [/[^#=]+/, 'comment']\r\n        ]\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4946\n")}}]);